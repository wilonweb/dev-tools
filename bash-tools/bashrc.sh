# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üì¶ Fonctions Bash/Zsh pour outils perso (tools + github)
# üìÅ √Ä sourcer dans ~/.zshrc ou ~/.bashrc
# üîÅ Utiliser `source ~/.zshrc` ou `reload` apr√®s modif
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# üîß Helper : concat√©ner des fichiers correspondant √† plusieurs motifs
# Usage: concat_files "sortie.txt" "*.js" "*.py" "Dockerfile"
function concat_files() {
  local outfile="$1"; shift
  : > "$outfile"  # vide/cr√©e le fichier de sortie

  # Assoc array pour √©viter les doublons si un fichier matche plusieurs motifs
  # (n√©cessite bash >= 4 ; sous zsh, √ßa passe aussi via emulate bash)
  declare -A seen

  # Parcourt chaque motif et ajoute les fichiers trouv√©s
  for pattern in "$@"; do
    if [[ "$pattern" == "Dockerfile" ]]; then
      # G√®re Dockerfile (avec ou sans casse, et sous-r√©pertoires)
      while IFS= read -r -d '' file; do
        [[ -n "${seen[$file]}" ]] && continue
        seen[$file]=1
        echo "===== $file =====" >> "$outfile"
        cat "$file" >> "$outfile"
        echo -e "\n" >> "$outfile"
      done < <(find . -type f \( -name "Dockerfile" -o -iname "dockerfile" \) -print0)
    else
      # Motif standard (ex: *.js, *.py, *.md, *.sh)
      while IFS= read -r -d '' file; do
        [[ -n "${seen[$file]}" ]] && continue
        seen[$file]=1
        echo "===== $file =====" >> "$outfile"
        cat "$file" >> "$outfile"
        echo -e "\n" >> "$outfile"
      done < <(find . -type f -iname "$pattern" -print0)
    fi
  done

  echo "‚úÖ Termin√© ‚Üí $outfile"
}

# üîß Menu TOOLS
function tools() {

  # --- helper: ex√©cuter une option ---
  run_tools_choice() {
    case "$1" in
      1)
        echo "üìÅ G√©n√©ration de structure.txt..."
        find . | awk -F/ '{ indent = ""; for(i=2;i<NF;i++) indent=indent"‚îÇ   "; if(NF>1) print indent "‚îú‚îÄ‚îÄ " $NF; else print $0; }' > structure.txt
        echo "‚úÖ Termin√©"
        ;;
      2)
        echo "üîç Liste des fichiers .sh..."
        find . -type f -name "*.sh" > liste-sh.txt
        echo "‚úÖ Termin√©"
        ;;
      3)
        echo "üìú Concat√©nation des fichiers .js..."
        concat_files "liste-js.txt" "*.js"
        ;;
      4)
        echo "üìú Concat√©nation des fichiers .sh..."
        concat_files "liste-sh-concat.txt" "*.sh"
        ;;
      5)
        echo "üìò Concat√©nation des fichiers .md..."
        concat_files "liste-md.txt" "*.md"
        ;;
      6)
        github
        ;;
      7)
        echo "üëã Bye !"
        ;;
      8)
        echo "üêç Concat√©nation des fichiers .py..."
        concat_files "liste-py.txt" "*.py"
        ;;
      9)
        echo "üê≥ Concat√©nation des Dockerfile..."
        concat_files "liste-dockerfile.txt" "Dockerfile"
        ;;
      10)
        echo "üß© Combo personnalis√©e"
        echo "   Tape les types s√©par√©s par des espaces : js py sh md docker"
        echo -n "   Types : "
        read types

        patterns=()
        for t in $types; do
          case "$t" in
            js)     patterns+=('*.js') ;;
            py)     patterns+=('*.py') ;;
            sh)     patterns+=('*.sh') ;;
            md)     patterns+=('*.md') ;;
            docker) patterns+=('Dockerfile') ;;
            *) echo "‚ö†Ô∏è Type inconnu ignor√©: $t" ;;
          esac
        done

        if [[ ${#patterns[@]} -eq 0 ]]; then
          echo "‚ùå Aucun type valide fourni."
          return
        fi

        echo -n "   Nom du fichier de sortie (defaut: liste-combo.txt) : "
        read outfile
        [[ -z "$outfile" ]] && outfile="liste-combo.txt"

        echo "üìö Concat√©nation ‚Üí ${patterns[*]}"
        concat_files "$outfile" "${patterns[@]}"
        ;;
      *)
        echo "‚ùå Choix invalide: $1"
        ;;
    esac
  }

  # --- affichage menu ---
  echo "üß∞ Menu TOOLS"
  echo "1) Afficher l'arborescence (structure.txt)"
  echo "2) Lister les fichiers .sh (liste-sh.txt)"
  echo "3) Concat√©ner les .js avec titres (liste-js.txt)"
  echo "4) Concat√©ner les .sh avec titres (liste-sh-concat.txt)"
  echo "5) Concat√©ner les .md avec titres (liste-md.txt)"
  echo "6) Menu GitHub"
  echo "7) Quitter"
  echo "8) Concat√©ner les .py (liste-py.txt)"
  echo "9) Concat√©ner les Dockerfile (liste-dockerfile.txt)"
  echo "10) Concat√©ner combo (ex: js+py, js+docker, py+docker, etc.)"
  echo -n "Ton choix (ex: 3+2, 3,2, 3 2, 3-5) : "
  read raw

  # --- parsing multi-s√©lection ---
  # normalise s√©parateurs: + , ; ‚Üí espaces
  input=$(echo "$raw" | tr '+,;' '   ')

  to_run=()
  for token in $input; do
    if [[ "$token" =~ ^([0-9]+)-([0-9]+)$ ]]; then
      start="${BASH_REMATCH[1]}"
      end="${BASH_REMATCH[2]}"
      if (( start <= end )); then
        for ((i=start; i<=end; i++)); do to_run+=("$i"); done
      else
        for ((i=start; i>=end; i--)); do to_run+=("$i"); done
      fi
    else
      to_run+=("$token")
    fi
  done

  # ex√©cution s√©quentielle
  for choice in "${to_run[@]}"; do
    run_tools_choice "$choice"
  done
}


# üß∞ Menu GitHub
function github() {
  echo "üêô Menu GitHub CLI"
  echo "1) Cr√©er un repo"
  echo "2) Supprimer un repo"
  echo "3) Lister mes repos"
  echo "4) Passer un repo en public"
  echo "5) Tout passer en priv√©"
  echo "6) Changer visibilit√© d‚Äôun repo"
  echo "7) Quitter"
  echo -n "üëâ Ton choix : "
  read choice

  case $choice in
    1) bash ~/Documents/VisualStudioCode/dev-tools/github-tools/create-repo.sh ;;
    2) bash ~/Documents/VisualStudioCode/dev-tools/github-tools/delete-repo.sh ;;
    3) bash ~/Documents/VisualStudioCode/dev-tools/github-tools/list-repo.sh ;;
    4) bash ~/Documents/VisualStudioCode/dev-tools/github-tools/make-public.sh ;;
    5) bash ~/Documents/VisualStudioCode/dev-tools/github-tools/private-all.sh ;;
    6) bash ~/Documents/VisualStudioCode/dev-tools/github-tools/togle-visibility.sh ;;
    7) echo "üëã √Ä bient√¥t" ;;
    *) echo "‚ùå Choix invalide" ;;
  esac
}
